service: senior-test-dev

custom:
  songsBucket: senior-test-dev-songs
  trimBucket: senior-test-dev-trim

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  environment: ${file(./serverless.env.yml):environment}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - "s3:Put*"
        - "s3:GetObject"
        - "s3:DeleteObject"
      Resource:
        Fn::Join:
          - ""
          - - 'arn:aws:s3:::'
            - ${self:custom.songsBucket}
            - '/*'
    - Effect: Allow
      Action:
        - "s3:Put*"
        - "s3:GetObject"
        - "s3:DeleteObject"
      Resource:
        Fn::Join:
          - ""
          - - 'arn:aws:s3:::'
            - ${self:custom.trimBucket}
            - '/*'
    - Effect: Allow
      Action:
        - "s3:ListBucket"
        - "s3:ListObjects"
        - "s3:ListObjectsV2"
      Resource:
        Fn::Join:
          - ""
          - - 'arn:aws:s3:::'
            - ${self:custom.trimBucket}

plugins:
  - serverless-offline

functions:
  get_upload_url:
    handler: handlers.getUploadUrl
    events:
      - http:
          path: songs/get_upload_url
          method: post

  trim_song:
    handler: handlers.trimSong
    events:
      - s3:
          bucket: ${self:custom.songsBucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .mp3
    layers:
      - { Ref: FfmpegLambdaLayer }

  get_song_urls:
    handler: handlers.getSongUrls
    events:
      - http:
          path: songs/get_song_urls
          method: get

resources:
  Resources:
    TrimBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.trimBucket}
        AccessControl: PublicRead

layers:
  ffmpeg:
    path: layer